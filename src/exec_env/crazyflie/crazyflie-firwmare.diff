diff --git a/Makefile b/Makefile
index 0b80973..3abe13a 100644
--- a/Makefile
+++ b/Makefile
@@ -269,7 +269,11 @@ OBJ = $(FREERTOS_OBJ) $(PORT_OBJ) $(ST_OBJ) $(PROJ_OBJ) $(CRT0)
 ############### Compilation configuration ################
 AS = $(CROSS_COMPILE)as
 CC = $(CROSS_COMPILE)gcc
+ifeq ($(djnn),1)
+LD = $(CROSS_COMPILE)g++
+else
 LD = $(CROSS_COMPILE)gcc
+endif
 SIZE = $(CROSS_COMPILE)size
 OBJCOPY = $(CROSS_COMPILE)objcopy
 GDB = $(CROSS_COMPILE)gdb
@@ -310,7 +314,9 @@ CFLAGS += -DBOARD_REV_$(REV) -DESTIMATOR_NAME=$(ESTIMATOR)Estimator -DCONTROLLER
 CFLAGS += $(PROCESSOR) $(INCLUDES)
 
 
-CFLAGS += -Wall -Wmissing-braces -fno-strict-aliasing $(C_PROFILE) -std=gnu11
+CFLAGS += -Wall
+#CFLAGS += -Wno-error=address-of-packed-member
+CFLAGS += -Wmissing-braces -fno-strict-aliasing $(C_PROFILE) -std=gnu11
 # Compiler flags to generate dependency files:
 CFLAGS += -MD -MP -MF $(BIN)/dep/$(@).d -MQ $(@)
 #Permits to remove un-used functions and global variables from output file
@@ -336,6 +342,29 @@ ifeq ($(LTO), 1)
   LDFLAGS += -Os -flto -fuse-linker-plugin
 endif
 
+# djnn
+ifeq ($(djnn),1)
+djnn_path := ../djnn-cpp
+djnn_include_path := $(djnn_path)/src
+djnn_lib_path := $(djnn_path)/build
+
+FREERTOS_OBJ += event_groups.o
+
+INCLUDES += -I$(djnn_path)/src
+CFLAGS += -DUSE_DJNN=1
+CFLAGS += -DconfigUSE_RECURSIVE_MUTEXES=1 -DconfigNUM_THREAD_LOCAL_STORAGE_POINTERS=8
+#CXXFLAGS += -ffunction-sections -fdata-sections
+#CXXFLAGS += -std=c++14
+LDFLAGS += -Wl,-z,now -Wl,-z,relro -Wl,-Bstatic
+#LDFLAGS += -Wl,--gc-sections -Wl,--print-gc-sections
+#-L$(djnn_lib_path)
+#LIBS += -static -ldjnn-base -ldjnn-exec_env -ldjnn-core -static-libstdc++
+#LIBS += -ldjnn-crazyflie
+LIBS += $(djnn_lib_path)/libdjnn-crazyflie.a
+#LIBS += ../djnn-cpp/build/src/exec_env/crazyflie/crazyflie.o ../djnn-cpp/build/src/core/core.o
+LIBS += -Wl,--start-group -static-libstdc++ -static-libgcc -lsupc++ -lstdc++ -lc -Wl,--end-group
+endif
+
 #Program name
 PROG = $(PLATFORM)
 #Where to compile the .o
diff --git a/src/modules/interface/worker.h b/src/modules/interface/worker.h
index 63d5dba..2d01c93 100644
--- a/src/modules/interface/worker.h
+++ b/src/modules/interface/worker.h
@@ -40,6 +40,9 @@ bool workerTest();
  */
 void workerLoop();
 
+void workerBlock();
+void workerHandleOneEvent();
+
 /**
  * Schedule a function for execution by the worker loop
  * The function will be executed as soon as possible by the worker loop.
diff --git a/src/modules/src/system.c b/src/modules/src/system.c
index fcc5712..1af34c6 100644
--- a/src/modules/src/system.c
+++ b/src/modules/src/system.c
@@ -67,6 +67,13 @@
 #include "app.h"
 #include "static_mem.h"
 
+#ifdef USE_DJNN 
+// djnn
+#include "core/core-c.h"
+#include "exec_env/exec_env-c.h"
+#include "base/base-c.h"
+#endif
+
 /* Private variable */
 static bool selftestPassed;
 static bool canFly;
@@ -144,6 +151,12 @@ bool systemTest()
 
 /* Private functions implementation */
 
+void DJNN_DEBUG_PRINT(const char* fff)
+{
+  DEBUG_PRINT("coucou\n");
+  DEBUG_PRINT("%s",fff);
+}
+
 void systemTask(void *arg)
 {
   bool pass = true;
@@ -183,6 +196,19 @@ void systemTask(void *arg)
   proximityInit();
 #endif
 
+  DEBUG_PRINT("SCOOOOO\n");
+
+#ifdef USE_DJNN
+  DEBUG_PRINT("USE_DJNN\n");
+  djnn_init_core();
+  //djnn_init_exec_env();
+  //djnn_init_base();
+
+  djnn_init_prog();
+  DEBUG_PRINT("djnn_init_prog done\n");
+#endif
+  
+
   //Test the modules
   pass &= systemTest();
   pass &= configblockTest();
@@ -230,6 +256,8 @@ void systemTask(void *arg)
   }
   DEBUG_PRINT("Free heap: %d bytes\n", xPortGetFreeHeapSize());
 
+  //djnn_launch_mainloop ();
+
   workerLoop();
 
   //Should never reach this point!
diff --git a/src/modules/src/worker.c b/src/modules/src/worker.c
index 289ddec..c48928f 100644
--- a/src/modules/src/worker.c
+++ b/src/modules/src/worker.c
@@ -75,6 +75,23 @@ void workerLoop()
   }
 }
 
+struct worker_work work;
+
+void workerBlock()
+{
+  if (!workerQueue)
+    return;
+  work.function = NULL;
+  xQueueReceive(workerQueue, &work, portMAX_DELAY);
+}
+
+void workerHandleOneEvent()
+{
+  if (work.function)
+    work.function(work.arg);
+}
+
+
 int workerSchedule(void (*function)(void*), void *arg)
 {
   struct worker_work work;
diff --git a/tools/make/targets.mk b/tools/make/targets.mk
index 52bc7a7..acc3cc1 100644
--- a/tools/make/targets.mk
+++ b/tools/make/targets.mk
@@ -32,7 +32,7 @@ CCS_COMMAND_SILENT="  CCS   $@"
 	@$(if $(QUIET), ,echo $(CCS_COMMAND$(VERBOSE)) )
 	@$(CCS_COMMAND)
 
-LD_COMMAND=$(LD) $(LDFLAGS) $(foreach o,$(OBJ),$(BIN)/$(o)) -lm -o $@
+LD_COMMAND=$(LD) $(LDFLAGS) $(foreach o,$(OBJ),$(BIN)/$(o)) -lm -o $@ $(LIBS)
 LD_COMMAND_SILENT="  LD    $@"
 $(PROG).elf: $(OBJ)
 	@$(if $(QUIET), ,echo $(LD_COMMAND$(VERBOSE)) )
