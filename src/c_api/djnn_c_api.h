namespace djnn {
class CoreProcess;
typedef CoreProcess ParentProcess;
class FatProcess;
class MainLoop;
class Rectangle;
class Circle;
class Ellipse;
class Line;
class RectangleClip;
class Image;
class PathImage;
class DataImage;
class FillRule;
class Texture;
class Opacity;
class OutlineWidth;
class OutlineCapStyle;
class OutlineJoinStyle;
class OutlineMiterLimit;
class DashOffset;
class GradientStop;
class Gradient;
class LinearGradient;
class RadialGradient;
class FontSize;
class FontWeight;
class FontStyle;
class FontFamily;
class TextAnchor;
class Translation;
class Rotation;
class Scaling;
class Skew;
class Homography;
class Volume;
class Sound;
class World;
class PhyObj;
class Box;
class Plane;
class Sphere;
class Binding;
class Assignment;
class Synchronizer;
class Activator;
class NativeAction;
class Blank;
class Component;
class AssignmentSequence;
class List;
class ListIterator;
class Set;
class SetIterator;
class Spike;
class RefProperty;
class RemoteProperty;
class IntProperty;
class DoubleProperty;
class TextProperty;
class BoolProperty;
class Timer;
class Exit;
class Connector;
class Clock;
class Counter;
class Deref;
class DerefDouble;
class DerefString;
class Dictionary;
class Finder;
class FSM;
class FSMTransition;
class FSMState;
class HermiteCurve;
class LogPrinter;
class SwitchList;
class SwitchRange;
class Switch;
class TextPrinter;
class Regex;
class TextAccumulator;
class TextComparator;
class TextCatenator;
class WallClock;
class Window;
class FillColor_rgb;
class FillColor_value;
class OutlineColor;
class Text;
}

namespace djnn {
  class Image;
  class FillColor;

  // following for js
  using PathImage = Image;
  using FillColor_rgb = FillColor;
  using FillColor_value = FillColor;
}
extern "C" {
void djnn_init_core();
void djnn_clear_core();
void djnn_init_exec_env();
void djnn_clear_exec_env();
void djnn_init_base();
void djnn_clear_base();
void djnn_init_display();
void djnn_clear_display();
void djnn_init_gui();
void djnn_clear_gui();
void djnn_init_audio();
void djnn_clear_audio();
void djnn_init_physics();
void djnn_clear_physics();
void djnn_activate(djnn::CoreProcess* p);
djnn::CoreProcess* djnn_find_child(djnn::CoreProcess* p, const char* n);
djnn::process_type_e djnn_get_process_type(djnn::CoreProcess* p);
djnn::CoreProcess* djnn_get_activation_source(djnn::CoreProcess* p);
void* djnn_get_native_user_data(djnn::CoreProcess* p);
void djnn_set_value (djnn::CoreProcess* p, double v, bool immediate);
double djnn_get_value (djnn::CoreProcess* p);
const char* djnn_get_string_value (djnn::CoreProcess* p);
void djnn_dump(djnn::CoreProcess* p);
djnn::MainLoop* djnn_mainloop_instance();
djnn::Rectangle* djnn_new_Rectangle(djnn::ParentProcess* parent, const char* name, double x, double y, double width, double height, double rx=0, double ry=0);
djnn::Circle* djnn_new_Circle(djnn::ParentProcess* parent, const char* name, double cx, double cy, double r);
djnn::Ellipse* djnn_new_Ellipse(djnn::ParentProcess* parent, const char* name, double cx, double cy, double rx, double ry);
djnn::Line* djnn_new_Line(djnn::ParentProcess* parent, const char* name, double x1, double y1, double x2, double y2);
djnn::RectangleClip* djnn_new_RectangleClip(djnn::ParentProcess* parent, const char* name, double x, double y, double width, double height);
djnn::PathImage* djnn_new_PathImage(djnn::ParentProcess* parent, const char* name, const char* path, double x, double y, double width, double height);
djnn::DataImage* djnn_new_DataImage(djnn::ParentProcess* parent, const char* name, const char* data, int format, double x, double y, double width, double height);
djnn::FillRule* djnn_new_FillRule(djnn::ParentProcess* parent, const char* name, int rule);
djnn::Texture* djnn_new_Texture(djnn::ParentProcess* parent, const char* name, const char* path);
djnn::OutlineWidth* djnn_new_OutlineWidth(djnn::ParentProcess* parent, const char* name, double width);
djnn::OutlineCapStyle* djnn_new_OutlineCapStyle(djnn::ParentProcess* parent, const char* name, int cap);
djnn::OutlineJoinStyle* djnn_new_OutlineJoinStyle(djnn::ParentProcess* parent, const char* name, int join);
djnn::OutlineMiterLimit* djnn_new_OutlineMiterLimit(djnn::ParentProcess* parent, const char* name, int limit);
djnn::DashOffset* djnn_new_DashOffset(djnn::ParentProcess* parent, const char* name, double offset);
djnn::GradientStop* djnn_new_GradientStop(djnn::ParentProcess* parent, const char* name, double r, double g, double b, double a, double offset);
djnn::LinearGradient* djnn_new_LinearGradient(djnn::ParentProcess* parent, const char* name, double x1, double y1, double x2, double y2, int spread, int coords);
djnn::RadialGradient* djnn_new_RadialGradient(djnn::ParentProcess* parent, const char* name, double cx, double cy, double r, double fx, double fy, int spread, int coords);
djnn::FontSize* djnn_new_FontSize(djnn::ParentProcess* parent, const char* name, int unit, double size);
djnn::FontWeight* djnn_new_FontWeight(djnn::ParentProcess* parent, const char* name, int weight);
djnn::FontStyle* djnn_new_FontStyle(djnn::ParentProcess* parent, const char* name, int style);
djnn::FontFamily* djnn_new_FontFamily(djnn::ParentProcess* parent, const char* name, const char* family);
djnn::TextAnchor* djnn_new_TextAnchor(djnn::ParentProcess* parent, const char* name, int anchor);
djnn::Translation* djnn_new_Translation(djnn::ParentProcess* parent, const char* name, double tx, double ty);
djnn::Rotation* djnn_new_Rotation(djnn::ParentProcess* parent, const char* name, double a, double cx, double cy);
djnn::Scaling* djnn_new_Scaling(djnn::ParentProcess* parent, const char* name, double sx, double sy, double cx, double cy);
djnn::Homography* djnn_new_Homography(djnn::ParentProcess* parent, const char* name, double m11=1, double m12=0, double m13=0, double m14=0, double m21=0, double m22=1, double m23=0, double m24=0, double m31=0, double m32=0, double m33=1, double m34=0, double m41=0, double m42=0, double m43=0, double m44=1);
djnn::Volume* djnn_new_Volume(djnn::ParentProcess* parent, const char* name, double volume);
djnn::Plane* djnn_new_Plane(djnn::ParentProcess* parent, const char* name, double a, double b, double c, double d);
djnn::Binding* djnn_new_Binding(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* src, djnn::activation_flag_e src_flag, djnn::CoreProcess* dst, djnn::activation_flag_e dst_flag);
djnn::Assignment* djnn_new_Assignment(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* src, djnn::CoreProcess* dst, bool is_model);
djnn::Synchronizer* djnn_new_Synchronizer(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* dst, const char* spec);
djnn::Activator* djnn_new_Activator(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* src);
djnn::NativeAction* djnn_new_NativeAction(djnn::ParentProcess* parent, const char* name, const char* action, void* data, bool is_model);
djnn::Blank* djnn_new_Blank(djnn::ParentProcess* parent, const char* name);
djnn::Component* djnn_new_Component(djnn::ParentProcess* parent, const char* name);
djnn::AssignmentSequence* djnn_new_AssignmentSequence(djnn::ParentProcess* parent, const char* name, bool is_model);
djnn::List* djnn_new_List(djnn::ParentProcess* parent, const char* name);
djnn::ListIterator* djnn_new_ListIterator(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* list, djnn::CoreProcess* action, bool is_model);
djnn::Set* djnn_new_Set(djnn::ParentProcess* parent, const char* name);
djnn::SetIterator* djnn_new_SetIterator(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* set, djnn::CoreProcess* action, bool is_model);
djnn::Spike* djnn_new_Spike(djnn::ParentProcess* parent, const char* name);
djnn::RefProperty* djnn_new_RefProperty(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* ref);
djnn::RemoteProperty* djnn_new_RemoteProperty(djnn::ParentProcess* parent, const char* name, const char* spec);
djnn::IntProperty* djnn_new_IntProperty(djnn::ParentProcess* parent, const char* name, int value);
djnn::DoubleProperty* djnn_new_DoubleProperty(djnn::ParentProcess* parent, const char* name, double value);
djnn::TextProperty* djnn_new_TextProperty(djnn::ParentProcess* parent, const char* name, const char* value);
djnn::BoolProperty* djnn_new_BoolProperty(djnn::ParentProcess* parent, const char* name, bool value);
djnn::Timer* djnn_new_Timer(djnn::ParentProcess* parent, const char* name, int delay);
djnn::Exit* djnn_new_Exit(djnn::ParentProcess* parent, const char* name, int value, bool is_model);
djnn::Connector* djnn_new_Connector(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* src, djnn::CoreProcess* dst, bool copy_on_activation);
djnn::Clock* djnn_new_Clock(djnn::ParentProcess* parent, const char* name, int period);
djnn::Counter* djnn_new_Counter(djnn::ParentProcess* parent, const char* name, int init, int delta);
djnn::Deref* djnn_new_Deref(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* ref_prop, const char* path, djnn::djnn_dir_t dir);
djnn::DerefDouble* djnn_new_DerefDouble(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* ref_prop, const char* path, djnn::djnn_dir_t dir);
djnn::DerefString* djnn_new_DerefString(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* ref_prop, const char* path, djnn::djnn_dir_t dir);
djnn::Dictionary* djnn_new_Dictionary(djnn::ParentProcess* parent, const char* name);
djnn::Finder* djnn_new_Finder(djnn::ParentProcess* parent, const char* name, djnn::FatProcess* container, const char* path);
djnn::FSM* djnn_new_FSM(djnn::ParentProcess* parent, const char* name);
djnn::FSMTransition* djnn_new_FSMTransition(djnn::ParentProcess* parent, const char* name, djnn::CoreProcess* from, djnn::CoreProcess* to, djnn::CoreProcess* trigger, djnn::CoreProcess* action);
djnn::FSMState* djnn_new_FSMState(djnn::ParentProcess* parent, const char* name);
djnn::HermiteCurve* djnn_new_HermiteCurve(djnn::ParentProcess* parent, const char* name, double p1, double p2, double t1, double t2);
djnn::LogPrinter* djnn_new_LogPrinter(djnn::ParentProcess* parent, const char* name, const char* label);
djnn::SwitchList* djnn_new_SwitchList(djnn::ParentProcess* parent, const char* name, bool loop);
djnn::SwitchRange* djnn_new_SwitchRange(djnn::ParentProcess* parent, const char* name, double initial);
djnn::Switch* djnn_new_Switch(djnn::ParentProcess* parent, const char* name, const char* initial);
djnn::TextPrinter* djnn_new_TextPrinter(djnn::ParentProcess* parent, const char* name);
djnn::Regex* djnn_new_Regex(djnn::ParentProcess* parent, const char* name, const char* regex);
djnn::TextAccumulator* djnn_new_TextAccumulator(djnn::ParentProcess* parent, const char* name, const char* init);
djnn::TextComparator* djnn_new_TextComparator(djnn::ParentProcess* parent, const char* name);
djnn::TextCatenator* djnn_new_TextCatenator(djnn::ParentProcess* parent, const char* name);
djnn::WallClock* djnn_new_WallClock(djnn::ParentProcess* parent, const char* name);
djnn::Window* djnn_new_Window(djnn::ParentProcess* parent, const char* name, const char* title, double x, double y, double width, double height);
djnn::FillColor_rgb* djnn_new_FillColor_rgb(djnn::ParentProcess* parent, const char* name, double r, double g, double b);
djnn::FillColor_value* djnn_new_FillColor_value(djnn::ParentProcess* parent, const char* name, int value);
djnn::OutlineColor* djnn_new_OutlineColor(djnn::ParentProcess* parent, const char* name, double r, double g, double b);
djnn::Text* djnn_new_Text(djnn::ParentProcess* parent, const char* name, double x, double y, const char* text);
}
