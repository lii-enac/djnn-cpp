#line 2 "scanner.cpp"

#line 4 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CssFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Cssalloc (yy_size_t  );
void *Cssrealloc (void *,yy_size_t  );
void Cssfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[298] =
    {   0,
       42,   40,   41,   39,   40,   41,   36,   41,   40,   41,
       40,   41,   40,   41,   40,   41,   40,   41,   40,   41,
       40,   41,    9,   40,   41,   40,   41,   40,   41,   40,
       41,   40,   41,    7,   40,   41,    7,   40,   41,    7,
       40,   41,    4,   41,    3,   41,    4,   41,   40,   41,
       40,   41,   40,   41,   39,    8,   31,   32,    9,   32,
        1,   10,    9,    7,    7,    7,    7,    7,    2,   24,
       31,   25,   32,    9,   25,   32,    8,   31,   31,    8,
       38,   32,   32,   32,   32,   32,   32,   32,    9,16397,
    16401,16402,16399,16396,16398,16395,16400,    7,    7,    7,

        7,    7,   24,   31,   24,   31,   25,   32,   25,   32,
       25,   32,   25,   32,   25,   32,   25,   32,   25,   32,
       31,   32,16397,   32,16401,   32,16402,   32,16399,   32,
    16396,   32,16398,   32,16395,   32,16400,   32, 8205, 8205,
     8209, 8209, 8210, 8210, 8207, 8207, 8204, 8204, 8206, 8206,
     8203, 8203, 8208, 8208,   37,    7,    7,   24,   31,   25,
       32,16397,   25,   32,16401,   25,   32,16402,   25,   32,
    16399,   25,   32,16396,   25,   32,16398,   25,   32,16395,
       25,   32,16400,   25,   32,   31, 8205,   32, 8205,   32,
     8209,   32, 8209,   32, 8210,   32, 8210,   32, 8207,   32,

     8207,   32, 8204,   32, 8204,   32, 8206,   32, 8206,   32,
     8203,   32, 8203,   32, 8208,   32, 8208,   32,   32,   26,
        7,    7,   24,   31, 8205,   25,   32, 8205,   25,   32,
     8209,   25,   32, 8209,   25,   32, 8210,   25,   32, 8210,
       25,   32, 8207,   25,   32, 8207,   25,   32, 8204,   25,
       32, 8204,   25,   32, 8206,   25,   32, 8206,   25,   32,
     8203,   25,   32, 8203,   25,   32, 8208,   25,   32, 8208,
       25,   32,   25,   32,   19,   26,    7,   34,   34,   28,
        5,   33,   21,   28,   27,   33,   33,   20,   27,    6,
       35,   29,   22,   29,   30,   23,   30

    } ;

static yyconst flex_int16_t yy_accept[330] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   11,   13,   15,   17,   19,   21,   23,   26,   28,
       30,   32,   34,   37,   40,   43,   45,   47,   49,   51,
       53,   55,   56,   56,   56,   56,   57,   57,   58,   58,
       58,   58,   58,   59,   61,   61,   62,   63,   63,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   65,   66,   67,   67,   68,   69,   70,   72,   72,
       74,   77,   77,   77,   77,   77,   77,   77,   77,   78,
       78,   78,   79,   80,   80,   81,   81,   81,   82,   83,
       84,   85,   86,   87,   88,   89,   90,   91,   92,   93,

       94,   95,   96,   97,   98,   98,   98,   98,   98,   98,
       98,   99,  100,  101,  102,  103,  105,  107,  109,  111,
      113,  115,  117,  119,  121,  121,  121,  121,  121,  121,
      121,  122,  122,  124,  126,  128,  130,  132,  134,  136,
      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  155,  155,
      155,  155,  156,  156,  157,  158,  158,  158,  160,  163,
      166,  169,  172,  175,  178,  181,  184,  186,  186,  186,
      186,  186,  186,  186,  187,  187,  189,  191,  193,  195,
      197,  199,  201,  203,  205,  207,  209,  211,  213,  215,

      217,  219,  220,  220,  220,  221,  221,  221,  222,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  225,
      228,  231,  234,  237,  240,  243,  246,  249,  252,  255,
      258,  261,  264,  267,  270,  273,  275,  275,  275,  277,
      277,  277,  277,  277,  277,  277,  278,  278,  278,  278,
      278,  278,  278,  279,  279,  279,  279,  279,  279,  279,
      279,  280,  280,  280,  280,  280,  281,  281,  281,  282,
      282,  282,  282,  282,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  285,  285,  285,  285,  285,  286,  286,
      286,  286,  286,  286,  287,  287,  287,  288,  288,  288,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  291,  291,  291,  291,  291,  291,  292,  292,  292,
      292,  293,  293,  295,  295,  295,  296,  298,  298
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    9,   11,   12,
       13,   14,    9,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,    9,   21,
        9,   22,    9,   23,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
        9,   25,    9,    9,    9,    9,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   33,   35,   36,   37,   38,
       39,   40,   33,   41,   42,   43,   44,   45,   33,   46,
       33,   33,    9,    9,    9,    9,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    2,    2,    4,    2,    2,    4,    2,
        2,    2,    2,    5,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    5
    } ;

static yyconst flex_int16_t yy_base[358] =
    {   0,
        0,    0,   45,   46,   44,   45,  805, 1567,   52, 1567,
       64,   43,  779,   47,  787,   51,  788,   89,   47,  795,
      766,   58,  774,   49,   30, 1567, 1567,  780,  751,   71,
       69,   89,   77,  722,   90, 1567,  123,  733,  105,   91,
      144,  735,  731,  166,  182, 1567, 1567,  736,    0,  717,
       64,  715,  715,   75,  723,  695,  678,  677,  694,  672,
      683,  195,  682,  208,   82,  102, 1567,  681,  214,  680,
      236,  252,  676,  648,  631,  630,  623,   97,  118,  277,
      302,  637,  315,  133,  134,  336,  357, 1567,   26,  131,
      103,  141,  136,  636,  370,  258,  613,  612,  611,  610,

      588,  571,  570,  569,  572,  573,  575,  570,  595,  570,
      383,  563,  389,  135,  155,  546,  402,  156,  158,  159,
      161,  204,  545,  415,  526,  527,  529,  524,  526,  428,
      434,  447,  478,  525,  572,  619,  666,  713,  760,  807,
      525, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567,  530,  521,  506,
      438, 1567,  432,  531,  572,  246,  311,  578,  854,  901,
      948,  995, 1042, 1089, 1136, 1183,  619,  436,  427,  433,
      433,  410,  625,  666,  672,  713,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  719,  404,  405, 1567,  383,  383,  382,  760,  255,
      387,  830,  346,  367, 1206,  132,  177, 1213,  766,  380,
      379,  369,  356,  354,  352,  350,  348,  335,  333,  331,
      329,  327,  325,  314,  313,  901,  292,  292, 1567,  283,
      282,  294,  307,  290,  276,  292,  971,  213,  388,  420,
     1222,  288, 1567, 1237, 1250,  180,  839, 1269,  206, 1290,
     1266,  282,  294,  270,  273, 1567,  261,  265, 1567,  433,
      266, 1018,  931, 1567,  182, 1279, 1315, 1340,  242, 1300,
     1361, 1382, 1567,  226,  230,  216,  222, 1567, 1065,  977,
     1024,  834, 1324,  262, 1089, 1349,  264, 1095,  281, 1567,

      187,  176,  161, 1069,  173, 1159, 1395, 1401,  147,  127,
     1567,  119,  116, 1431, 1074, 1168, 1567,   97,  107,   90,
     1567,   83, 1567,   71,   34, 1567, 1567, 1567, 1450, 1454,
     1456, 1460, 1462, 1466, 1468, 1470, 1472, 1476, 1480, 1484,
     1488, 1492, 1496, 1500, 1505, 1510, 1515, 1520, 1525, 1530,
     1535, 1540, 1545, 1549, 1553, 1557, 1561
    } ;

static yyconst flex_int16_t yy_def[358] =
    {   0,
      328,    1,  329,  329,    1,    1,  328,  328,  328,  328,
      328,  330,  331,  332,  328,  333,  328,  328,  328,  328,
      328,  334,  335,  335,  335,  328,  328,  328,  336,  337,
      328,  328,  328,  328,  330,  328,  338,  331,  339,  332,
      340,  328,  333,  333,  341,  328,  328,  328,   18,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      335,  335,  335,  342,  335,  335,  328,  336,  343,  337,
      337,  344,  328,  328,  328,  328,  328,  330,  330,  330,
      338,  331,  331,  332,  332,  332,  340,  328,  333,  333,
      333,  333,  333,  333,  333,  328,  345,  346,  347,  348,

      349,  350,  351,  352,  328,  328,  328,  328,  328,  328,
       62,  335,   62,  335,  335,  336,  336,  337,  337,  337,
      337,  337,  337,  337,  328,  328,  328,  328,  328,   80,
       83,   86,  328,  133,  133,  133,  133,  133,  133,  133,
       95,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,   62,   62,  328,  353,  117,  328,  169,
      169,  169,  169,  169,  169,  169,  124,  328,  328,  328,
      328,  328,   80,   83,   86,   95,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  328,  328,  328,  328,  328,  335,   62,  328,
      328,  328,  353,  353,  353,  354,  355,  353,  117,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  124,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  335,  328,  328,  328,  328,
      353,  328,  328,  353,  353,  354,  328,  356,  355,  357,
      353,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  354,  354,  354,  356,  355,  355,
      355,  357,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  354,  354,  277,  355,  355,  281,  328,  328,

      328,  328,  328,  328,  328,  328,  277,  281,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,    0,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328
    } ;

static yyconst flex_int16_t yy_nxt[1615] =
    {   0,
        8,    9,   10,    9,    9,   11,   12,   13,    8,    8,
       14,    8,    8,    8,    8,   15,   16,   17,   18,   19,
       20,    8,   21,    8,   22,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       24,   23,   23,   25,   23,   23,   23,   27,   27,   36,
       45,   29,   29,   32,   64,   32,   32,   36,   28,   28,
       30,   30,  133,   31,   31,   33,   33,   37,   33,   44,
       66,   41,   55,   64,  327,   45,   62,   56,   33,   33,
       65,   33,   57,   62,   62,   62,   62,   62,   62,   71,
       32,   58,   32,   32,   73,   72,   36,   34,   47,   74,

       98,   36,  102,   36,   75,   48,   64,   49,  114,   99,
       34,  326,  325,   76,   37,   41,   50,  103,   51,  324,
      104,   37,   52,   83,   36,   53,   64,   45,   54,   79,
       83,   83,   83,   83,   83,   83,  323,  115,  257,  322,
      136,   80,   37,   36,   36,  321,  166,   81,   80,   80,
       80,   80,   80,   80,   85,   45,  258,   41,   41,   64,
       45,  320,   86,  138,  319,   45,  167,  134,   87,   86,
       86,   86,   86,   86,   86,   47,  135,  137,  139,   64,
       72,  140,   72,   72,   44,   72,  257,  257,  257,  318,
       45,  314,  169,   89,  170,   90,  172,  173,  313,   91,

       95,  260,   92,  171,  258,   93,  258,   95,   95,   95,
       95,   95,   95,  111,  248,  248,  257,  248,  312,   64,
      111,  111,  111,  111,  111,  111,  113,  250,   72,  311,
      260,  174,  117,  113,  113,  113,  113,  113,  113,  117,
      117,  117,  117,  117,  117,   47,  175,  210,  210,  176,
      210,  302,  257,  301,   71,  303,  210,  210,  300,  210,
       72,  299,  211,  118,  212,  119,  260,   47,  257,  120,
      124,  211,  121,  212,  257,  122,   96,  124,  124,  124,
      124,  124,  124,   36,  289,   50,  258,   51,  260,  252,
      252,   52,  252,  288,   53,  130,  287,   54,  286,  285,

      253,   37,  130,  130,  130,  130,  130,  130,   79,  284,
      309,  283,  214,  215,  310,  215,   64,  216,  269,  268,
       80,  217,  267,  266,  265,  264,   81,   80,   80,   80,
       80,   80,   80,  131,  263,  218,  262,   72,   72,   39,
      131,  131,  131,  131,  131,  131,   36,  251,  252,   72,
      252,   72,  328,   72,  132,   72,  328,   72,  253,   72,
       41,  132,  132,  132,  132,  132,  132,   85,  254,  255,
      218,  255,   72,  216,   72,   86,   72,  217,   72,  253,
       72,   87,   86,   86,   86,   86,   86,   86,  141,  248,
      248,  218,  248,   72,   45,  141,  141,  141,  141,  141,

      141,  164,  250,   72,   72,  247,   64,  165,  164,  164,
      164,  164,  164,  164,  165,  165,  165,  165,  165,  165,
      168,  270,  270,  245,  270,  244,   69,  168,  168,  168,
      168,  168,  168,  177,  270,  270,  271,  270,  272,   72,
      177,  177,  177,  177,  177,  177,  183,  243,  242,  271,
      241,  272,  184,  183,  183,  183,  183,  183,  183,  184,
      184,  184,  184,  184,  184,  185,  240,  239,  238,  237,
      207,  206,  185,  185,  185,  185,  185,  185,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,   43,  142,  142,   43,  142,  142,  142,

      142,  186,   45,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,  187,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      205,  144,  144,  202,  144,  144,  144,  144,  188,  208,
      202,  202,  202,  202,  202,  202,  208,  208,  208,  208,
      208,  208,  204,  203,  182,  181,  180,  179,  178,   72,
       69,  189,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,   64,  146,  146,
      209,  146,  146,  146,  146,  190,  219,  209,  209,  209,

      209,  209,  209,  219,  219,  219,  219,  219,  219,  163,
      162,  161,  160,  159,  158,  157,  155,  153,  191,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  151,  148,  148,  236,  148,  148,
      148,  148,  192,   78,  236,  236,  236,  236,  236,  236,
       78,   78,   78,   78,   78,   78,  149,  147,  145,  143,
       45,   39,  129,  128,  127,  193,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  126,  150,  150,   82,  150,  150,  150,  150,  194,
       84,   82,   82,   82,   82,   82,   82,   84,   84,   84,

       84,   84,   84,  125,   72,   69,   64,   64,  110,  109,
      108,  107,  195,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  106,  152,
      152,   43,  152,  152,  152,  152,  196,   94,   43,   43,
       43,   43,   43,   43,   94,   94,   94,   94,   94,   94,
      105,  101,  100,   97,   96,   45,   88,   39,   77,  197,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,   69,  154,  154,  246,  154,
      154,  154,  154,  198,  116,  246,  246,  246,  246,  246,
      246,  116,  116,  116,  116,  116,  116,   67,   64,   60,

       59,   46,   42,   39,  328,  328,  199,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  328,  156,  156,  328,  156,  156,  156,  156,
      200,  248,  248,  328,  248,  304,  304,  328,  304,  249,
      273,  273,  328,  273,  250,  328,  211,  328,  212,  328,
      305,  274,  306,  201,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,   70,
      142,  142,   70,  142,  142,  142,  142,  220,   72,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

      221,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  328,  144,  144,  123,
      144,  144,  144,  144,  222,  328,  123,  123,  123,  123,
      123,  123,  273,  273,  328,  273,  328,  328,  328,  328,
      328,  328,  328,  274,  328,  328,  328,  223,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  328,  146,  146,  328,  146,  146,  146,
      146,  224,  248,  248,  328,  248,  328,  328,  290,  290,
      249,  290,  328,  328,  328,  250,  328,  328,  328,  247,
      328,  292,  328,  328,  225,  148,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      328,  148,  148,  328,  148,  148,  148,  148,  226,  290,
      290,  328,  290,  328,  328,  290,  290,  291,  290,  328,
      328,  328,  292,  328,  271,  328,  272,  328,  292,  328,
      328,  227,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  328,  150,  150,
      328,  150,  150,  150,  150,  228,  290,  290,  328,  290,
      304,  304,  328,  304,  291,  315,  315,  328,  315,  292,
      328,  328,  328,  289,  328,  305,  317,  306,  229,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  328,  152,  152,  307,  152,  152,
      152,  152,  230,  308,  307,  307,  307,  307,  307,  307,
      308,  308,  308,  308,  308,  308,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  231,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  328,  154,  154,  328,  154,  154,  154,  154,  232,
      315,  315,  328,  315,  328,  328,  328,  328,  316,  315,
      315,  317,  315,  328,  328,  305,  328,  306,  328,  328,
      317,  328,  233,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  328,  156,

      156,  328,  156,  156,  156,  156,  234,  214,  215,  328,
      215,  328,  216,  328,  251,  252,  217,  251,  328,  328,
      328,  328,  328,  251,  252,  261,  252,  328,  328,  235,
      218,  328,  328,  328,  253,  328,  328,  218,  254,  255,
      328,  255,  328,  216,  328,  328,  218,  217,  328,  253,
      328,  254,  255,  328,  255,  328,  216,  328,  328,  328,
      217,  218,  253,  328,  328,  328,  328,  251,  252,  328,
      252,  328,  328,  328,  218,  276,  328,  328,  253,  328,
      273,  273,  328,  293,  328,  257,  328,  277,  328,  328,
      218,  294,  328,  278,  277,  277,  277,  277,  277,  277,

      280,  273,  273,  258,  296,  328,  328,  328,  281,  328,
      257,  328,  297,  328,  282,  281,  281,  281,  281,  281,
      281,  257,  328,  328,  260,  273,  273,  328,  293,  328,
      257,  328,  328,  295,  328,  328,  294,  328,  328,  258,
      295,  295,  295,  295,  295,  295,  276,  328,  258,  328,
      273,  273,  328,  296,  328,  328,  328,  328,  277,  257,
      328,  297,  328,  328,  278,  277,  277,  277,  277,  277,
      277,  257,  328,  260,  328,  328,  328,  328,  328,  298,
      328,  328,  328,  328,  328,  260,  298,  298,  298,  298,
      298,  298,  280,  328,  328,  328,  328,  328,  328,  328,

      281,  328,  328,  328,  328,  328,  282,  281,  281,  281,
      281,  281,  281,  275,  328,  328,  328,  328,  328,  279,
      275,  275,  275,  275,  275,  275,  279,  279,  279,  279,
      279,  279,  315,  315,  328,  315,  328,  328,  328,  328,
      316,  328,  328,  317,  328,  328,  328,  328,  328,  314,
       26,   26,   26,   26,   26,   35,   35,   35,   35,   38,
       38,   40,   40,   40,   40,   43,   43,   61,   61,   61,
       61,   63,   63,   68,   68,   70,   70,   78,   78,   78,
       78,   82,   82,   82,   82,   84,   84,   84,   84,   94,
       94,   94,   94,  112,  112,  112,  112,  116,  116,  116,

      116,  123,  123,  123,  123,  142,  142,  142,  328,  142,
      144,  144,  144,  328,  144,  146,  146,  146,  328,  146,
      148,  148,  148,  328,  148,  150,  150,  150,  328,  150,
      152,  152,  152,  328,  152,  154,  154,  154,  328,  154,
      156,  156,  156,  328,  156,  213,  213,  328,  213,  213,
      256,  256,  256,  256,  259,  259,  259,  259,  275,  275,
      275,  275,  279,  279,  279,  279,    7,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328
    } ;

static yyconst flex_int16_t yy_chk[1615] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,   12,
       89,    5,    6,    9,   25,    9,    9,   14,    3,    4,
        5,    6,   89,    5,    6,   11,   11,   12,   11,   16,
       25,   14,   19,   24,  325,   16,   22,   19,   33,   33,
       24,   33,   19,   22,   22,   22,   22,   22,   22,   30,
       32,   19,   32,   32,   31,   30,   35,   11,   18,   31,

       51,   40,   54,   78,   31,   18,   65,   18,   65,   51,
       33,  324,  322,   31,   35,   40,   18,   54,   18,  320,
       54,   78,   18,   39,   79,   18,   66,   91,   18,   37,
       39,   39,   39,   39,   39,   39,  319,   66,  216,  318,
       91,   37,   79,   84,   85,  313,  114,   37,   37,   37,
       37,   37,   37,   37,   41,   90,  216,   84,   85,  114,
       93,  312,   41,   93,  310,   92,  115,   90,   41,   41,
       41,   41,   41,   41,   41,   44,   90,   92,   93,  115,
      118,   93,  119,  120,   44,  121,  256,  217,  275,  309,
       44,  305,  118,   44,  119,   44,  120,  121,  303,   44,

       45,  217,   44,  119,  256,   44,  275,   45,   45,   45,
       45,   45,   45,   62,  248,  248,  259,  248,  302,   62,
       62,   62,   62,   62,   62,   62,   64,  248,  122,  301,
      259,  122,   69,   64,   64,   64,   64,   64,   64,   69,
       69,   69,   69,   69,   69,   71,  122,  166,  166,  122,
      166,  287,  279,  286,   71,  287,  210,  210,  285,  210,
       71,  284,  166,   71,  166,   71,  279,   96,  294,   71,
       72,  210,   71,  210,  297,   71,   96,   72,   72,   72,
       72,   72,   72,   80,  271,   96,  294,   96,  297,  252,
      252,   96,  252,  268,   96,   80,  267,   96,  265,  264,

      252,   80,   80,   80,   80,   80,   80,   80,   81,  263,
      299,  262,  167,  167,  299,  167,  246,  167,  245,  244,
       81,  167,  243,  242,  241,  240,   81,   81,   81,   81,
       81,   81,   81,   83,  238,  167,  237,  235,  234,   83,
       83,   83,   83,   83,   83,   83,   86,  213,  213,  233,
      213,  232,  213,  231,   86,  230,  213,  229,  213,  228,
       86,   86,   86,   86,   86,   86,   86,   87,  214,  214,
      213,  214,  227,  214,  226,   87,  225,  214,  224,  214,
      223,   87,   87,   87,   87,   87,   87,   87,   95,  249,
      249,  214,  249,  222,   95,   95,   95,   95,   95,   95,

       95,  111,  249,  221,  220,  211,  208,  113,  111,  111,
      111,  111,  111,  111,  113,  113,  113,  113,  113,  113,
      117,  250,  250,  207,  250,  206,  117,  117,  117,  117,
      117,  117,  117,  124,  270,  270,  250,  270,  250,  124,
      124,  124,  124,  124,  124,  124,  130,  204,  203,  270,
      182,  270,  131,  130,  130,  130,  130,  130,  130,  131,
      131,  131,  131,  131,  131,  132,  181,  180,  179,  178,
      163,  161,  132,  132,  132,  132,  132,  132,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      160,  134,  134,  141,  134,  134,  134,  134,  134,  164,
      141,  141,  141,  141,  141,  141,  164,  164,  164,  164,
      164,  164,  159,  158,  129,  128,  127,  126,  125,  123,
      116,  134,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  112,  135,  135,
      165,  135,  135,  135,  135,  135,  168,  165,  165,  165,

      165,  165,  165,  168,  168,  168,  168,  168,  168,  110,
      109,  108,  107,  106,  105,  104,  103,  102,  135,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  101,  136,  136,  177,  136,  136,
      136,  136,  136,  183,  177,  177,  177,  177,  177,  177,
      183,  183,  183,  183,  183,  183,  100,   99,   98,   97,
       94,   82,   77,   76,   75,  136,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   74,  137,  137,  184,  137,  137,  137,  137,  137,
      185,  184,  184,  184,  184,  184,  184,  185,  185,  185,

      185,  185,  185,   73,   70,   68,   63,   61,   60,   59,
       58,   57,  137,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,   56,  138,
      138,  186,  138,  138,  138,  138,  138,  202,  186,  186,
      186,  186,  186,  186,  202,  202,  202,  202,  202,  202,
       55,   53,   52,   50,   48,   43,   42,   38,   34,  138,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,   29,  139,  139,  209,  139,
      139,  139,  139,  139,  219,  209,  209,  209,  209,  209,
      209,  219,  219,  219,  219,  219,  219,   28,   23,   21,

       20,   17,   15,   13,    7,    0,  139,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,    0,  140,  140,    0,  140,  140,  140,  140,
      140,  212,  212,    0,  212,  292,  292,    0,  292,  212,
      257,  257,    0,  257,  212,    0,  212,    0,  212,    0,
      292,  257,  292,  140,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,    0,  170,  170,  236,
      170,  170,  170,  170,  170,    0,  236,  236,  236,  236,
      236,  236,  273,  273,    0,  273,    0,    0,    0,    0,
        0,    0,    0,  273,    0,    0,    0,  170,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,    0,  171,  171,    0,  171,  171,  171,
      171,  171,  247,  247,    0,  247,    0,    0,  290,  290,
      247,  290,    0,    0,    0,  247,    0,    0,    0,  247,
        0,  290,    0,    0,  171,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
        0,  172,  172,    0,  172,  172,  172,  172,  172,  272,
      272,    0,  272,    0,    0,  291,  291,  272,  291,    0,
        0,    0,  272,    0,  272,    0,  272,    0,  291,    0,
        0,  172,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,    0,  173,  173,
        0,  173,  173,  173,  173,  173,  289,  289,    0,  289,
      304,  304,    0,  304,  289,  315,  315,    0,  315,  289,
        0,    0,    0,  289,    0,  304,  315,  304,  173,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,    0,  174,  174,  295,  174,  174,
      174,  174,  174,  298,  295,  295,  295,  295,  295,  295,
      298,  298,  298,  298,  298,  298,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  174,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,    0,  175,  175,    0,  175,  175,  175,  175,  175,
      306,  306,    0,  306,    0,    0,    0,    0,  306,  316,
      316,  306,  316,    0,    0,  306,    0,  306,    0,    0,
      316,    0,  175,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,    0,  176,

      176,    0,  176,  176,  176,  176,  176,  215,  215,    0,
      215,    0,  215,    0,  218,  218,  215,  218,    0,    0,
        0,    0,    0,  251,  251,  218,  251,    0,  251,  176,
      215,    0,  251,    0,  251,    0,    0,  218,  254,  254,
        0,  254,    0,  254,    0,    0,  251,  254,    0,  254,
        0,  255,  255,    0,  255,    0,  255,    0,    0,    0,
      255,  254,  255,    0,    0,    0,    0,  261,  261,    0,
      261,    0,  261,    0,  255,  258,  261,    0,  261,    0,
      276,  276,    0,  276,    0,  276,    0,  258,    0,    0,
      261,  276,    0,  258,  258,  258,  258,  258,  258,  258,

      260,  280,  280,  276,  280,    0,    0,    0,  260,    0,
      280,    0,  280,    0,  260,  260,  260,  260,  260,  260,
      260,  277,    0,    0,  280,  293,  293,    0,  293,    0,
      293,    0,    0,  277,    0,    0,  293,    0,    0,  277,
      277,  277,  277,  277,  277,  277,  278,    0,  293,    0,
      296,  296,    0,  296,    0,    0,    0,    0,  278,  296,
        0,  296,    0,    0,  278,  278,  278,  278,  278,  278,
      278,  281,    0,  296,    0,    0,    0,    0,    0,  281,
        0,    0,    0,    0,    0,  281,  281,  281,  281,  281,
      281,  281,  282,    0,    0,    0,    0,    0,    0,    0,

      282,    0,    0,    0,    0,    0,  282,  282,  282,  282,
      282,  282,  282,  307,    0,    0,    0,    0,    0,  308,
      307,  307,  307,  307,  307,  307,  308,  308,  308,  308,
      308,  308,  314,  314,    0,  314,    0,    0,    0,    0,
      314,    0,    0,  314,    0,    0,    0,    0,    0,  314,
      329,  329,  329,  329,  329,  330,  330,  330,  330,  331,
      331,  332,  332,  332,  332,  333,  333,  334,  334,  334,
      334,  335,  335,  336,  336,  337,  337,  338,  338,  338,
      338,  339,  339,  339,  339,  340,  340,  340,  340,  341,
      341,  341,  341,  342,  342,  342,  342,  343,  343,  343,

      343,  344,  344,  344,  344,  345,  345,  345,    0,  345,
      346,  346,  346,    0,  346,  347,  347,  347,    0,  347,
      348,  348,  348,    0,  348,  349,  349,  349,    0,  349,
      350,  350,  350,    0,  350,  351,  351,  351,    0,  351,
      352,  352,  352,    0,  352,  353,  353,    0,  353,  353,
      354,  354,  354,  354,  355,  355,  355,  355,  356,  356,
      356,  356,  357,  357,  357,  357,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328
    } ;

static yyconst flex_int16_t yy_rule_linenum[41] =
    {   0,
       80,   81,   82,   83,   84,   85,   86,   87,   89,   90,
       91,   92,   93,   94,   95,   96,   97,   98,  100,  101,
      102,  103,  104,  105,  106,  108,  109,  110,  111,  112,
      113,  114,  116,  117,  118,  120,  121,  122,  124,  127
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.l"
/*
 *  djnn v2
 *
 *  The copyright holders for the contents of this file are:
 *      Ecole Nationale de l'Aviation Civile, France (2020)
 *  See file "license.terms" for the rights and conditions
 *  defined by copyright holders.
 *
 *
 *  Contributors:
 *      Mathieu Magnaudet <mathieu.magnaudet@enac.fr>
 *
 */
/*
 * this code is an adaptation from https://www.w3.org/Style/CSS/validator/
 */
#line 20 "scanner.l"

#include <string>

#include "scanner.h"

typedef css::Parser::token token;
typedef css::Parser::token_type token_type;

#define MM 1.0
#define IN (25.4 * MM)
#define PT (IN/72.0)
#define CM (10 * MM)
#define PC (12 * PT)
#define PX (IN/96.0) 

#define yyterminate() return token::END

#define YY_NO_UNISTD_H



/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 67 "scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1045 "scanner.cpp"

#define INITIAL 0
#define COMMENT 1
#define AFTER_IDENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 70 "scanner.l"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 1215 "scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)Cssalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 329 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 328 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 41 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 41 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 42 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
YY_RULE_SETUP
#line 80 "scanner.l"
{BEGIN(COMMENT);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 81 "scanner.l"
{BEGIN(0);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 82 "scanner.l"
{/* ignore */}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 83 "scanner.l"
{/* ignore */}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 84 "scanner.l"
{BEGIN(0); return token::IMPORT_SYM;}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 85 "scanner.l"
{BEGIN(0); return token::IMPORTANT_SYM;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "scanner.l"
{BEGIN(AFTER_IDENT); yylval->stringVal = new std::string(yytext, yyleng); return token::IDENT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 87 "scanner.l"
{BEGIN(0); yylval->stringVal = new std::string(yytext, yyleng); return token::STRING;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 89 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext); return token::NUMBER;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 90 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext); return token::PERCENTAGE;}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 91 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext) * PT; return token::LENGTH;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 92 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext) * MM; return token::LENGTH;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 93 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext) * CM; return token::LENGTH;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 94 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext) * PC; return token::LENGTH;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 95 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext) * IN; return token::LENGTH;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 96 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext) * PX; return token::LENGTH;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 97 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext); return token::EMS;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 98 "scanner.l"
{BEGIN(0); yylval->doubleVal = atof(yytext); return token::EXS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 100 "scanner.l"
{return token::LINK_PSCLASS_AFTER_IDENT;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 101 "scanner.l"
{return token::VISITED_PSCLASS_AFTER_IDENT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 102 "scanner.l"
{return token::ACTIVE_PSCLASS_AFTER_IDENT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 103 "scanner.l"
{return token::FIRST_LINE_AFTER_IDENT;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 104 "scanner.l"
{return token::FIRST_LETTER_AFTER_IDENT;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 105 "scanner.l"
{yylval->integerVal = std::strtol((std::string(yytext)).replace(0,1,"0x").c_str(), nullptr, 16); return token::HASH_AFTER_IDENT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 106 "scanner.l"
{return token::CLASS_AFTER_IDENT;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 108 "scanner.l"
{BEGIN(AFTER_IDENT); return token::LINK_PSCLASS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 109 "scanner.l"
{BEGIN(AFTER_IDENT); return token::VISITED_PSCLASS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 110 "scanner.l"
{BEGIN(AFTER_IDENT); return token::ACTIVE_PSCLASS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 111 "scanner.l"
{BEGIN(AFTER_IDENT); return token::FIRST_LINE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 112 "scanner.l"
{BEGIN(AFTER_IDENT); return token::FIRST_LETTER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 113 "scanner.l"
{BEGIN(AFTER_IDENT); yylval->integerVal = std::strtol((std::string(yytext)).replace(0,1,"0x").c_str(), nullptr, 16); return token::HASH;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 114 "scanner.l"
{BEGIN(AFTER_IDENT); yylval->stringVal = new std::string(yytext, yyleng); return token::CLASS;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
#line 117 "scanner.l"
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 117 "scanner.l"
{BEGIN(0); return token::URL;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 118 "scanner.l"
{BEGIN(0); yylval->stringVal = new std::string(yytext, yyleng); return token::RGB;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 120 "scanner.l"
{BEGIN(0);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "scanner.l"
{BEGIN(0); return token::CDO;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "scanner.l"
{BEGIN(0); return token::CDC;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 124 "scanner.l"
{BEGIN(0); yylloc->step();}
	YY_BREAK
/* pass all other characters up to bison */
case 40:
YY_RULE_SETUP
#line 127 "scanner.l"
{
    return static_cast<token_type>(*yytext);
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 130 "scanner.l"
ECHO;
	YY_BREAK
#line 1577 "scanner.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(AFTER_IDENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Cssfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Cssfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
size_t yyFlexLexer::LexerInput( char* buf, size_t /* max_size */ )
#else
size_t yyFlexLexer::LexerInput( char* buf, size_t max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, size_t size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Cssrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 329 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 329 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 328);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Cssalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Cssalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Cssfree((void *) b->yy_ch_buf  );

	Cssfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cssalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cssrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Cssalloc(new_size  );

		else
			(yy_start_stack) = (int *) Cssrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Cssalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Cssrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Cssfree (void * ptr )
{
	free( (char *) ptr );	/* see Cssrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 130 "scanner.l"



namespace css {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : CssFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

#ifdef yylex
#undef yylex
#endif

int CssFlexLexer::yylex()
{
    std::cerr << "in CssFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int CssFlexLexer::yywrap()
{
    return 1;
}

