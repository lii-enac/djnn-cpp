/*
 *  djnn v2
 *
 *  The copyright holders for the contents of this file are:
 *      Ecole Nationale de l'Aviation Civile, France (2018)
 *  See file "license.terms" for the rights and conditions
 *  defined by copyright holders.
 *
 *
 *  Contributors:
 *      Mathieu Magnaudet <mathieu.magnaudet@enac.fr>
 *      Stephane Conversy <stephane.conversy@enac.fr>
 *
 */

djnn lies on processes and couplings (see src/core/ontology/).
A djnn program is a graph of coupled processes.
Every node in the graph is a process.
Every edge in the graph is a coupling.

Every process can be coupled to multiple processes.
A process has an activation state: ACTIVATED or DEACTIVATED.
A coupling reacts according to a change of the activation state of its source process, and change the activation state of its destination process.
There are four coupling modes: source{activation,deactivation} -> destination{activation,deactivation}.

Everything in djnn but coupling is a process: a property (e.g. int, double, text), a binding, a connector, a state-machine, a switch etc.
A process "performs something" according to its nature whenever it is activated: transmit activation (binding), transmit a value (connector), transitionning to another state (state-machine) etc.

This particular implementation relies on a synchronous sort and execution of a directed graph (see src/core/execution/), that will call activate and deactivate only once on each process that necessitates it. This implementation should be able to cope with cycles in the graph.

A process can be a "Component" with supprocesses, with a parent-child relationship. Internally, it has 2 other sates: ACTIVATING, DEACTIVATING.
The activation of a process entails the activation of all of its children that are not qualified as models. While activating its children a process is in the ACTIVATING state.
The deactivation of a process entails the deactivation of its children. During this operation it is in the DEACTIVATING state.
If a process has no parent it can be activated.
If a process has a parent and the parent is activated or activating then it can be activated.
If a process has a parent and the parent is deactivated or deactivating then it cannot be activated.
If a process is activated it can be deactivated.


A property does not notify its subscribers if it is not activable, i.e. if it has a parent and its parent is not activated.
But its value can be set even if it is not activable.
If a property is activable, it notifies its subscribers each time its value is set.

A process "Spike" is deactivated or activating. When activated by an external signal, that is a coupling or an explicit activation, it notifies its activation to all of its subscribers. Once this is done, it returns to the state deactivated.

A process "Assignment" is activated when its parent is activated except explicitly stated as activable only on-demand through a coupling

A process "Connector" triggers a copy from its source property to the destination property each times the source property is updated. A first copy is made on activation. The copy is immediate.

A process "Binding" builds a coupling between two processes. Each time the source is activated the destination is activated. This activation is immediate.

To appear: A process "Watcher" waits for the incoming processes, when all of them had a chance to be activated the "Watcher" notifies all its subscribers. The "waiting" lasts only one execution cycle.
